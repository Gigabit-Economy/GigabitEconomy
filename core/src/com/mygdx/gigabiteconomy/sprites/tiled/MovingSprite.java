package com.mygdx.gigabiteconomy.sprites.tiled;

import com.badlogic.gdx.graphics.g2d.TextureAtlas;
import com.badlogic.gdx.graphics.g2d.TextureRegion;
import com.badlogic.gdx.math.Vector2;
import com.badlogic.gdx.utils.Array;
import com.mygdx.gigabiteconomy.exceptions.TileMovementException;
import com.mygdx.gigabiteconomy.screens.Tile;
import com.badlogic.gdx.utils.Disposable;
import com.mygdx.gigabiteconomy.sprites.tiled.TiledObject;

/**
 * Class representing a sprite shown on screen, ready to be drawn with batch.draw(); in MainScreen class.
 * Sprite has ability to move tiles.
 * MainScreen interfaces with this class through GameObject.
 */
public abstract class MovingSprite extends TiledObject implements Disposable {
    private TextureAtlas ta;
    // Array of regions in spritesheet
    private Array<TextureAtlas.AtlasRegion> regions;
    // Current image being displayed in the movement animation
    private TextureRegion textureRegion;

    private DIRECTION directionMoving;
    private boolean moving;
    // Vector we add to position with every move
    private Vector2 deltaMove = new Vector2(0, 0);
    private static float deltaVert = 3F;
    private static float deltaHoriz = 3.5F;
    private Tile targetTile;

    private MovingAnimation<TextureRegion> movementAnimation;
    private MovingAnimation<TextureRegion> attackAnimation;
    private boolean attacking = false;

    /**
     * Create a new moving sprite
     *
     * @param movementConfig texture atlas config file for movement (name of .txt file generated by TexturePacker application)
     * @param attackingConfig texture atlas config file for attacking (name of .txt file generated by TexturePacker application)
     * @param x position of Tile (within tile grid) to place sprite
     * @param y position of Tile (within tile grid) to place sprite
     */
    public MovingSprite(String movementConfig, String attackingConfig, int x, int y) {
        super(x, y);

        ta = new TextureAtlas(movementConfig);
        regions = ta.getRegions();
        textureRegion = regions.get(0);

        movementAnimation = new MovingAnimation<TextureRegion>(1/14f, regions, true);
        attackAnimation = new MovingAnimation<TextureRegion>(1/14f, new TextureAtlas(attackingConfig).getRegions(), false);
    }

    /**
     * Get the texture region of the sprite
     *
     * @return the sprite's TextureRegion instance
     */
    public TextureRegion getTextureRegion() {
        return textureRegion;
    }

    /**
     * Set the direction the sprite is facing (and therefore moves in).
     *
     * @param dir the direction enum to move in
     */
    public void setDirectionMovement(MovingSprite.DIRECTION dir) {
        directionMoving = dir;
        if (directionMoving == null) {
            deltaMove.x = 0;
            deltaMove.y = 0;
            return;
        }
        deltaMove.x = dir.dx; deltaMove.y = dir.dy;
    }

    /**
     * Get if the sprite is currently moving or not.
     *
     * @return if the sprite is moving (true => moving; false => not moving)
     */
    public boolean isMoving() {
        return moving;
    }

    /**
     * Set if the sprite is currently moving or not.
     *
     * @param moving if the sprite is moving (true => moving; false => not moving)
     */
    public void setMoving(boolean moving) {
        this.moving = moving;
    }

    public void setDeltaMove(float x, float y) {
        deltaMove.x = x;
        deltaMove.y = y;
    }

    /**
     * 'snaps' sprite to current Tile centre
     *
     * @param delta the delta time of the current render
     */
    public void snap(float delta) {
        Tile currentTile = super.getCurrentTile();

        setPos(currentTile.getTileCoords()[0], currentTile.getTileCoords()[1]);
    }

    /**
     * Get the target tile for the sprite to move to
     *
     * @return the Tile instance of the target tile
     */
    public Tile getTargetTile()
    {
        return targetTile;
    }

    /**
     * Set the target tile for the sprite to move to
     *
     * @param targetTile the Tile instance of the target tile
     */
    public void setTargetTile(Tile targetTile) {
        this.targetTile = targetTile;
        if (targetTile == null) return;
        targetTile.setOccupied(this);
    }

    public boolean onTile(Tile toCheck) {
        if (targetTile==null) return false;
        return (Math.abs(getX()-targetTile.getTileCoords()[0])<5) && (Math.abs(getY()-targetTile.getTileCoords()[1])<5);
    }

    public abstract DIRECTION setNextDirection();

    public Tile setNextTile() {
        setNextDirection();
        Tile toSet = getTileManager().getAdjecentTile(getCurrentTile(), getDirectionMoving().name(), 1);

        if (toSet == null || (toSet.getOccupiedBy() != null && toSet.getOccupiedBy() != this)) return null;

        setTargetTile(toSet); //Set target tile to one we want to go to
        return toSet;
    }


    /**
     * Method to handle general MovingSprite movement
     * Attacks if boolean set and moves the sprite in direction of directionMoving
     * Implementation notes:
     *     -> setNextDirection() abstract method defines path of MovingSprite
     *     -> Can be extended by overriding and calling super on this method
     *     -> When a sprite is moving, two Tiles are occupied. Moving to and moving from.
     * @param delta
     * @return True: Arrived at next tile ; False: Currently moving
     */
    public boolean move(float delta) throws TileMovementException {
        /**
         * Checking if sprite should be attacking
         */
        if (attacking) {
            //Set current texture to next animation texture
            textureRegion = (TextureRegion) attackAnimation.runAnimation(delta);
            //Checking if animation finished
            if (attackAnimation.isFinished(delta)) {
                System.out.println("Finished attacking");
                setAttacking(false);
            }
        }

        //Not moving - can just return
        if (directionMoving == null) return false;

        //Target tile is null when movement restarts (targetTile has been reached), we must get new Tile
        if (targetTile == null) {
            //If getting new tile results in null or new tile is occupied by something other than this, we are blocked
            setNextTile();
            if (targetTile == null /**|| targetTile.getOccupiedBy() != this */) { //If we are still then get next tile
                //Setting targetTile to null will cause this loop to run again, checking if we are still blocked
                targetTile = null;
                return false;
            }
        }

        /**
         * Commence movement logic by checking if we've arrived at the targetTile
         */
        if (this.onTile(targetTile)) {
            getCurrentTile().setOccupied(null);
            setCurrentTile(targetTile);
            snap(delta);
            targetTile = null;
            return true;
        }
        //Not made it yet!
        //Keep on moving
        addToPos(deltaMove);
        textureRegion = (TextureRegion) movementAnimation.runAnimation(delta);
        return false;
    }

    /**
     * Enum which maps direction to velocity vector with instance variables defined above
     */
    public enum DIRECTION {
        NORTH (0, deltaVert),
        EAST (deltaHoriz, 0),
        SOUTH (0, -deltaVert),
        WEST (-deltaHoriz, 0);

        public final float dx;
        public final float dy;

        private DIRECTION(float dx, float dy) {
            this.dx = dx; this.dy = dy;
        }
    }

    /**
     * Get the direction the sprite is currently facing (i.e. move direction)
     *
     * @return direction enum of the sprite
     */
    public DIRECTION getDirectionMoving()
    {
        return directionMoving;
    }

    /**
     * Get if the sprite is attacking
     *
     * @return if attacking (true => attacking; false => not attacking)
     */
    public boolean isAttacking() {
        return attacking;
    }

    /**
     * Set if the sprite is attacking
     *
     * @param attacking if attacking (true => attacking; false => not attacking)
     */
    public void setAttacking(boolean attacking) {
        this.attacking = attacking;
        System.out.println(String.format("Attacking: %s", attacking));
    }

    /**
     * Remove the sprite's texture atlas from memory once the sprite is no longer needed
     */
    public void dispose() {
        ta.dispose();
    }
}
