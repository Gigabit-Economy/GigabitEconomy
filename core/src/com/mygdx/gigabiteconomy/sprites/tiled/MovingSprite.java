package com.mygdx.gigabiteconomy.sprites.tiled;

import com.badlogic.gdx.graphics.g2d.TextureAtlas;
import com.badlogic.gdx.graphics.g2d.TextureRegion;
import com.badlogic.gdx.math.Vector2;
import com.badlogic.gdx.utils.Array;
import com.mygdx.gigabiteconomy.exceptions.TileMovementException;
import com.mygdx.gigabiteconomy.screens.Tile;
import com.badlogic.gdx.utils.Disposable;
import com.mygdx.gigabiteconomy.sprites.tiled.TiledObject;

/**
 * Class representing a sprite shown on screen, ready to be drawn with batch.draw(); in MainScreen class.
 * Sprite has ability to move tiles.
 * MainScreen interfaces with this class through GameObject.
 */
public abstract class MovingSprite extends TiledObject implements Disposable {
    private TextureAtlas ta;
    // Array of regions in spritesheet
    private Array<TextureAtlas.AtlasRegion> regions;
    // Current image being displayed in the movement animation
    private TextureRegion textureRegion;

    private DIRECTION directionMoving;
    private boolean moving;
    // Vector we add to position with every move
    private Vector2 deltaMove = new Vector2(0, 0);
    private static float deltaVert = 3F;
    private static float deltaHoriz = 3.5F;
    private Tile targetTile;

    /**
     * Constructor used to create a new moving sprite
     *
     * @param config Config file, name of .txt file generated by TexturePacker application
     * @param x position of Tile (within tile grid) to place sprite
     * @param y position of Tile (within tile grid) to place sprite
     */
    public MovingSprite(String config, int x, int y) {
        super(x, y);

        ta = new TextureAtlas(config);
        regions = ta.getRegions();

        textureRegion = regions.get(0);
    }

    public TextureRegion getTextureRegion() {
        return textureRegion;
    }

    /**
     * Set the direction the sprite is facing (and therefore moves in).
     *
     * @param direction the direction enum to move in
     */
    public void setDirectionMoving(DIRECTION direction)
    {
        this.directionMoving = direction;
    }

    public void setMoving(boolean moving) {
        this.moving = moving;
    }

    public boolean isMoving() {
        return moving;
    }

    public void setDeltaMove(float x, float y) {
        deltaMove.x = x;
        deltaMove.y = y;
    }

    /**
     * 'snaps' player sprite to current Tile centre
     */
    public void snap(float delta) {
        Tile currentTile = super.getCurrentTile();

        super.setPos(currentTile.getTileCoords()[0], currentTile.getTileCoords()[1]);
    }

    /**
     * Get the target tile for the sprite to move to
     *
     * @return the Tile instance of the target tile
     */
    public Tile getTargetTile()
    {
        return targetTile;
    }

    /**
     * Set the target tile for the sprite to move to
     *
     * @param targetTile the Tile instance of the target tile
     */
    public void setTargetTile(Tile targetTile)
    {
        this.targetTile = targetTile;
    }

    /**
     * Move the sprite to the set targetTile
     *
     * @param delta
     */
    public void move(float delta) throws TileMovementException {
        if (targetTile == null || targetTile.getOccupiedBy() != null) {
            directionMoving = null;
            targetTile = null;

            setMoving(false);

            throw new TileMovementException("Sprite didn't move to target tile as it either wasn't set or was occupied");
        }

        // If the distance from the centre is 5px, we snap and call it a day (Sprite has arrived at target)
        if ((Math.abs(getX() - targetTile.getTileCoords()[0]) < 5) && (Math.abs(getY() - targetTile.getTileCoords()[1]) < 5)) {
            // Arrived at tile
            System.out.println("Arrived at tile");
            System.out.println("Occupied tiles:");
            getTileManager().printOccupiedTiles();

            // Reset currentTile to targetTile
            setCurrentTile(getTileManager().placeObject(targetTile, this));

            if (isMoving()) {
                //If key is still held down, get next tile
                targetTile = getTileManager().getAdjecentTile(targetTile, directionMoving.toString(), 1);
                if (targetTile == null) setMoving(false);
            }
            else if (!isMoving() && targetTile != null) {
                //If key is released, but there's still distance to cover
                //currentTile = targetTile; useless line?
                targetTile = null;
                snap(delta);
                //Reset direction moving
                directionMoving = null;
            }
        } else {
            // Otherwise, keep adding deltaMove vector to positionVector
            super.addToPos(deltaMove);
        }
    }

    /**
     * Enum which maps direction to velocity vector with instance variables defined above
     */
    public enum DIRECTION {
        NORTH (0, deltaVert),
        EAST (deltaHoriz, 0),
        SOUTH (0, -deltaVert),
        WEST (-deltaHoriz, 0);

        public final float dx;
        public final float dy;

        private DIRECTION(float dx, float dy) {
            this.dx = dx; this.dy = dy;
        }
    }

    /**
     * Get the direction the sprite is currently facing (i.e. move direction)
     *
     * @return direction enum of the sprite
     */
    public DIRECTION getDirectionMoving()
    {
        return directionMoving;
    }

    /**
     * Remove the sprite's texture atlas from memory once the sprite is no longer needed
     */
    public void dispose() {
        ta.dispose();
    }
}
